{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","_ref","total","perPage","currentPage","onPageChange","totalPages","allPages","i","push","slice","Math","ceil","length","getNumberOfPages","isFirstPage","isLastPage","max","apply","_toConsumableArray","_jsxs","className","children","_jsx","cn","disabled","href","onClick","page","map","active","concat","onPageLinkClick","options","items","from","to","numbers","n","getNumbers","App","_useState","useState","_useState2","_slicedToArray","setPerPage","_useState3","_useState4","setCurrentPage","startIndex","endIndex","min","elementsOnPage","startElement","endElement","getNumberOfElements","id","value","onChange","e","newPerPage","target","htmlFor","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8bba929.chunk.js","sourcesContent":["import cn from 'classnames';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (value: number) => void;\n};\n\nconst getNumberOfPages = (\n  total: number,\n  perPage: number,\n): number[] => {\n  const allPages: number[] = [];\n\n  for (let i = 1; i <= total; i += 1) {\n    allPages.push(i);\n  }\n\n  return allPages.slice(0, Math.ceil(allPages.length / perPage));\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const totalPages = getNumberOfPages(total, perPage);\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === Math.max(...totalPages);\n\n  const onPageLinkClick = (page: number) => {\n    if (page !== currentPage) {\n      onPageChange(page);\n    }\n  };\n\n  const onPrevLinkClick = (page: number) => {\n    if (!isFirstPage) {\n      onPageChange(page - 1);\n    }\n  };\n\n  const onNextLinkClick = (page: number) => {\n    if (!isLastPage) {\n      onPageChange(page + 1);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={cn(\n        'page-item',\n        { disabled: isFirstPage },\n      )}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstPage}\n          onClick={() => onPrevLinkClick(currentPage)}\n        >\n          «\n        </a>\n      </li>\n      {totalPages.map(page => (\n        <li\n          key={page}\n          className={cn(\n            'page-item',\n            { active: page === currentPage },\n          )}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageLinkClick(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n      <li className={cn(\n        'page-item',\n        { disabled: isLastPage },\n      )}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastPage}\n          onClick={() => onNextLinkClick(currentPage)}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst options = [3, 5, 10, 20];\n\nconst items: string[] = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const startIndex = (currentPage - 1) * perPage + 1;\n  const endIndex = Math.min(currentPage * perPage, items.length);\n\n  const handlePerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newPerPage = +e.target.value;\n\n    setPerPage(newPerPage);\n    setCurrentPage(1);\n  };\n\n  const getNumberOfElements = (total: number): number[] => {\n    const elementsOnPage: number[] = [];\n\n    const startElement = (currentPage - 1) * perPage + 1;\n    const endElement = Math.min(currentPage * perPage, total);\n\n    for (let i = startElement; i <= endElement; i += 1) {\n      elementsOnPage.push(i);\n    }\n\n    return elementsOnPage;\n  };\n\n  const elementsOnPage = getNumberOfElements(items.length);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${startIndex} - ${endIndex} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handlePerPageChange}\n          >\n            {options.map((value) => (\n              <option\n                key={value}\n                value={value}\n              >\n                {value}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {elementsOnPage.map(element => (\n          <li\n            key={element}\n            data-cy=\"item\"\n          >\n            {`Item ${element}`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}